import requests
import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import threading

class URLShortenerApp:
    def __init__(self, root):
        self.root = root
        self.root.title("–°–æ–∫—Ä–∞—â–∞—Ç–µ–ª—å —Å—Å—ã–ª–æ–∫ - –õ–æ–∫–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è")
        self.root.geometry("500x400")
        self.root.resizable(True, True)
        
        self.api_url = "http://localhost:8001"
        self.setup_ui()
        
    def setup_ui(self):
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(main_frame, text="–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–æ–∫—Ä–∞—â–∞—Ç–µ–ª—å —Å—Å—ã–ª–æ–∫", 
                               font=("Arial", 14, "bold"))
        title_label.grid(row=0, column=0, columnspan=2, pady=10)
        
        # –ü–æ–ª–µ –¥–ª—è –∏—Å—Ö–æ–¥–Ω–æ–π —Å—Å—ã–ª–∫–∏
        ttk.Label(main_frame, text="–í–≤–µ–¥–∏—Ç–µ URL:").grid(row=1, column=0, sticky=tk.W, pady=5)
        self.url_entry = ttk.Entry(main_frame, width=50, font=("Arial", 10))
        self.url_entry.grid(row=1, column=1, sticky=(tk.W, tk.E), pady=5, padx=5)
        
        # –ü–æ–ª–µ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∫–æ–¥–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        ttk.Label(main_frame, text="–ö–∞—Å—Ç–æ–º–Ω—ã–π –∫–æ–¥ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):").grid(row=2, column=0, sticky=tk.W, pady=5)
        self.custom_code_entry = ttk.Entry(main_frame, width=20, font=("Arial", 10))
        self.custom_code_entry.grid(row=2, column=1, sticky=tk.W, pady=5, padx=5)
        
        # –ö–Ω–æ–ø–∫–∏
        button_frame = ttk.Frame(main_frame)
        button_frame.grid(row=3, column=0, columnspan=2, pady=10)
        
        self.shorten_btn = ttk.Button(button_frame, text="–°–æ–∫—Ä–∞—Ç–∏—Ç—å", command=self.shorten_url_thread)
        self.shorten_btn.pack(side=tk.LEFT, padx=5)
        
        self.stats_btn = ttk.Button(button_frame, text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", command=self.show_stats)
        self.stats_btn.pack(side=tk.LEFT, padx=5)
        
        # –ü–æ–ª–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        ttk.Label(main_frame, text="–°–æ–∫—Ä–∞—â–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞:").grid(row=4, column=0, sticky=tk.W, pady=5)
        self.result_entry = ttk.Entry(main_frame, width=50, font=("Arial", 10), state="readonly")
        self.result_entry.grid(row=4, column=1, sticky=(tk.W, tk.E), pady=5, padx=5)
        
        # –ö–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        self.copy_btn = ttk.Button(main_frame, text="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", command=self.copy_to_clipboard)
        self.copy_btn.grid(row=5, column=1, sticky=tk.W, pady=5, padx=5)
        
        # –õ–æ–≥ –¥–µ–π—Å—Ç–≤–∏–π
        ttk.Label(main_frame, text="–ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π:").grid(row=6, column=0, sticky=tk.W, pady=5)
        self.log_text = scrolledtext.ScrolledText(main_frame, width=55, height=10, font=("Consolas", 9))
        self.log_text.grid(row=6, column=1, sticky=(tk.W, tk.E), pady=5, padx=5)
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_var = tk.StringVar()
        self.status_var.set("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        status_bar = ttk.Label(main_frame, textvariable=self.status_var, relief=tk.SUNKEN)
        status_bar.grid(row=7, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=5)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏—è
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        
    def log_message(self, message):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥"""
        self.log_text.insert(tk.END, message + "\n")
        self.log_text.see(tk.END)
        
    def shorten_url_thread(self):
        """–ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        thread = threading.Thread(target=self.shorten_url)
        thread.daemon = True
        thread.start()
        
    def shorten_url(self):
        """–°–æ–∫—Ä–∞—â–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏"""
        try:
            self.shorten_btn.config(state="disabled")
            self.status_var.set("–°–æ–∫—Ä–∞—â–∞–µ–º —Å—Å—ã–ª–∫—É...")
            
            url = self.url_entry.get().strip()
            custom_code = self.custom_code_entry.get().strip() or None
            
            if not url:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ URL –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è")
                return
                
            payload = {"original_url": url}
            if custom_code:
                payload["custom_code"] = custom_code
                
            response = requests.post(f"{self.api_url}/api/shorten", json=payload)
            
            if response.status_code == 200:
                data = response.json()
                self.result_entry.config(state="normal")
                self.result_entry.delete(0, tk.END)
                self.result_entry.insert(0, data["short_url"])
                self.result_entry.config(state="readonly")
                
                self.log_message(f"‚úì –°–æ–∫—Ä–∞—â–µ–Ω–æ: {url} -> {data['short_url']}")
                self.status_var.set("–°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∫—Ä–∞—â–µ–Ω–∞!")
                
            else:
                error_msg = response.json().get("detail", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                messagebox.showerror("–û—à–∏–±–∫–∞", error_msg)
                self.log_message(f"‚úó –û—à–∏–±–∫–∞: {error_msg}")
                
        except requests.exceptions.ConnectionError:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ó–∞–ø—É—Å—Ç–∏—Ç–µ backend.")
            self.status_var.set("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
            self.log_message(f"‚úó –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            
        finally:
            self.shorten_btn.config(state="normal")
            
    def copy_to_clipboard(self):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        url = self.result_entry.get()
        if url:
            self.root.clipboard_clear()
            self.root.clipboard_append(url)
            self.status_var.set("–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä!")
            self.log_message("üìã –°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
            
    def show_stats(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        try:
            response = requests.get(f"{self.api_url}/api/stats")
            if response.status_code == 200:
                stats = response.json()
                messagebox.showinfo(
                    "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                    f"–í—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫: {stats['total_urls']}\n"
                    f"–í—Å–µ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤: {stats['total_clicks']}\n"
                    f"–°—Ä–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ –∫–ª–∏–∫–æ–≤: {stats['average_clicks']:.1f}"
                )
                self.log_message("üìä –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–∏—Å–∞")
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        except:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É")

def main():
    root = tk.Tk()
    app = URLShortenerApp(root)
    root.mainloop()

if __name__ == "__main__":
    main()
